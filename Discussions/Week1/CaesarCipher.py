import random       #importing functions from Lib/random

"""
Author: David Qiu

The purpose of this program is to implement Caesar/Substitution Cipher
and to illustrate the correctness of the encryption scheme.
Caesar Cipher is an example of a private key encryption as both keys are in the form of a secret
permutation. The scheme itself can be described as a tuple of three algorithms: Key Generation,
Encryption, and Decryption. The key generation algorithm creates a random one-to-one mapping between
the alphabet and itself. Note that the term "alphabet" describes the entire set of messages,
which is not necessary the alphabet "a-z". The following example however, will define the alphabet
as all the lowercase letters "a-z".
"""

def keyGen():
  """
  :output pi: a permutation that serves as the encryption and decryption key, which randomly maps
              the alphabet "a-z" to itself
  """
  pi = list(range(ord('a'), ord('z')+1))         # ord() converts an ASCII character to an integer
                                                # ord('a') = 97, ord('z') = 122
  random.shuffle(pi)                            # randomly shuffles the list in place
  return pi

def Enc(m, pi):
  """
  :param m: the message to be encrypted, which is a string of lowercase letters
  :param pi: the secret permutation, generated by the key generation algorithm
  :output c: ciphertext corresponding to encrypting the message
  """
  c = ''                                        # initializing c as empty
  for i in m:
    c += chr(pi[ord(i)-97])                     # chr() converts an integer to an ASCII character
  return c
  
def Dec(c, pi):
  """
  :param c: the ciphertext to be decrypted, which is a string of lowercase letters
  :param pi: the secret permutation, generated by the key generation algorithm
  :output m: message corresponding to decrypting the ciphertext
  """
  m = ''                                        # initializing m as empty
  for i in c:
    m += chr(pi.index(ord(i))+97)               # using index() to invert the permutation
  return m
  
"""
now to show that the above functions are correct. We will encrypt a random message
and verify that decrypting the corresponding ciphertext will reveal the same message
"""

perm = keyGen()
message = "test"
ciphertext = Enc(message, perm)
#print(ciphertext)
response = Dec(ciphertext, perm)
#print(response)
if response == message:
  print("Success")
else:
  print("Something went wrong")
